// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Validate decorator should add Validate metadata to a method when decorated with @Validate 1`] = `
{
  "test": [
    PropDecoratorFactory {
      "method": "get",
      "path": "/",
    },
    DecoratorFactory {
      "ids": [
        [Function],
      ],
    },
    PropDecoratorFactory {
      "rules": Map {
        "body" => {
          "$_root": {
            "ValidationError": [Function],
            "_types": Set {
              "alternatives",
              "any",
              "array",
              "boolean",
              "date",
              "function",
              "link",
              "number",
              "object",
              "string",
              "symbol",
              "binary",
            },
            "allow": [Function],
            "alt": [Function],
            "alternatives": [Function],
            "any": [Function],
            "array": [Function],
            "assert": [Function],
            "attempt": [Function],
            "binary": [Function],
            "bool": [Function],
            "boolean": [Function],
            "build": [Function],
            "cache": {
              "provision": [Function],
            },
            "checkPreferences": [Function],
            "compile": [Function],
            "custom": [Function],
            "date": [Function],
            "defaults": [Function],
            "disallow": [Function],
            "equal": [Function],
            "exist": [Function],
            "expression": [Function],
            "extend": [Function],
            "forbidden": [Function],
            "func": [Function],
            "function": [Function],
            "in": [Function],
            "invalid": [Function],
            "isError": [Function],
            "isExpression": [Function],
            "isRef": [Function],
            "isSchema": [Function],
            "link": [Function],
            "not": [Function],
            "number": [Function],
            "object": [Function],
            "only": [Function],
            "optional": [Function],
            "options": [Function],
            "override": Symbol(override),
            "preferences": [Function],
            "prefs": [Function],
            "ref": [Function],
            "required": [Function],
            "string": [Function],
            "strip": [Function],
            "symbol": [Function],
            "trace": [Function],
            "types": [Function],
            "untrace": [Function],
            "valid": [Function],
            "version": "17.7.0",
            "when": [Function],
            "x": [Function],
            Symbol(@hapi/lab/coverage/initialize): [Function],
          },
          "$_super": {},
          "$_temp": {
            "ruleset": false,
            "whens": {},
          },
          "$_terms": {
            "alterations": null,
            "examples": null,
            "externals": null,
            "metas": [],
            "notes": [],
            "shared": null,
            "tags": [],
            "whens": null,
          },
          "_cache": null,
          "_flags": {
            "only": true,
          },
          "_ids": {
            "_byId": Map {},
            "_byKey": Map {},
            "_schemaChain": false,
          },
          "_invalids": null,
          "_preferences": null,
          "_refs": {
            "refs": [],
          },
          "_rules": [],
          "_singleRules": Map {},
          "_valids": {
            "_lowercase": Map {},
            "_override": true,
            "_refs": Set {},
            "_values": Set {
              5,
            },
          },
          "type": "any",
        },
      },
      "useInterceptors": true,
      "validationOptions": {
        "escapeHtml": true,
      },
    },
  ],
}
`;

exports[`Validate decorator should add Validate metadata to a method when decorated with @Validate(validatorOptions) 1`] = `
{
  "test": [
    PropDecoratorFactory {
      "method": "get",
      "path": "/",
    },
    DecoratorFactory {
      "ids": [
        [Function],
      ],
    },
    PropDecoratorFactory {
      "rules": Map {
        "body" => {
          "$_root": {
            "ValidationError": [Function],
            "_types": Set {
              "alternatives",
              "any",
              "array",
              "boolean",
              "date",
              "function",
              "link",
              "number",
              "object",
              "string",
              "symbol",
              "binary",
            },
            "allow": [Function],
            "alt": [Function],
            "alternatives": [Function],
            "any": [Function],
            "array": [Function],
            "assert": [Function],
            "attempt": [Function],
            "binary": [Function],
            "bool": [Function],
            "boolean": [Function],
            "build": [Function],
            "cache": {
              "provision": [Function],
            },
            "checkPreferences": [Function],
            "compile": [Function],
            "custom": [Function],
            "date": [Function],
            "defaults": [Function],
            "disallow": [Function],
            "equal": [Function],
            "exist": [Function],
            "expression": [Function],
            "extend": [Function],
            "forbidden": [Function],
            "func": [Function],
            "function": [Function],
            "in": [Function],
            "invalid": [Function],
            "isError": [Function],
            "isExpression": [Function],
            "isRef": [Function],
            "isSchema": [Function],
            "link": [Function],
            "not": [Function],
            "number": [Function],
            "object": [Function],
            "only": [Function],
            "optional": [Function],
            "options": [Function],
            "override": Symbol(override),
            "preferences": [Function],
            "prefs": [Function],
            "ref": [Function],
            "required": [Function],
            "string": [Function],
            "strip": [Function],
            "symbol": [Function],
            "trace": [Function],
            "types": [Function],
            "untrace": [Function],
            "valid": [Function],
            "version": "17.7.0",
            "when": [Function],
            "x": [Function],
            Symbol(@hapi/lab/coverage/initialize): [Function],
          },
          "$_super": {},
          "$_temp": {
            "ruleset": false,
            "whens": {},
          },
          "$_terms": {
            "alterations": null,
            "examples": null,
            "externals": null,
            "metas": [],
            "notes": [],
            "shared": null,
            "tags": [],
            "whens": null,
          },
          "_cache": null,
          "_flags": {
            "only": true,
          },
          "_ids": {
            "_byId": Map {},
            "_byKey": Map {},
            "_schemaChain": false,
          },
          "_invalids": null,
          "_preferences": null,
          "_refs": {
            "refs": [],
          },
          "_rules": [],
          "_singleRules": Map {},
          "_valids": {
            "_lowercase": Map {},
            "_override": true,
            "_refs": Set {},
            "_values": Set {
              5,
            },
          },
          "type": "any",
        },
      },
      "useInterceptors": true,
      "validationOptions": {
        "escapeHtml": true,
      },
    },
  ],
}
`;
