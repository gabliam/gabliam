// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@Bean should add Bean metadata to a class when decorated multiple times with @Bean 1`] = `
{
  "test2Method": [
    PropDecoratorFactory {
      "id": "test2",
    },
    PropDecoratorFactory {
      "id": "test3",
    },
  ],
  "testMethod": [
    PropDecoratorFactory {
      "id": "test",
    },
  ],
}
`;

exports[`@Bean should add Bean metadata to a class when decorated with @Bean 1`] = `
{
  "test2Method": [
    PropDecoratorFactory {
      "id": "test2",
    },
  ],
  "testMethod": [
    PropDecoratorFactory {
      "id": "test",
    },
  ],
}
`;

exports[`@BeforeCreate should add BeforeCreate metadata to a class when decorating a method with @BeforeCreate 1`] = `
{
  "test2Method": [
    PropDecoratorFactory {},
  ],
  "testMethod": [
    PropDecoratorFactory {},
  ],
}
`;

exports[`@Config should add Registry and config metadata to a class when decorated with @Config 1`] = `
[
  DecoratorFactory {
    "order": 150,
  },
  DecoratorFactory {
    "autobind": true,
    "options": {
      "order": 150,
    },
    "type": "ConfigType",
  },
]
`;

exports[`@Config should add Registry and config metadata to a class when decorated with @Config(100) 1`] = `
[
  DecoratorFactory {
    "order": 100,
  },
  DecoratorFactory {
    "autobind": true,
    "options": {
      "order": 100,
    },
    "type": "ConfigType",
  },
]
`;

exports[`@CoreConfig should add Registry and config metadata to a class when decorated with @CoreConfig 1`] = `
[
  DecoratorFactory {
    "order": 50,
  },
  DecoratorFactory {
    "autobind": true,
    "options": {
      "order": 50,
    },
    "type": "ConfigType",
  },
]
`;

exports[`@CoreConfig should add Registry and config metadata to a class when decorated with @CoreConfig(100) 1`] = `
[
  DecoratorFactory {
    "order": 100,
  },
  DecoratorFactory {
    "autobind": true,
    "options": {
      "order": 100,
    },
    "type": "ConfigType",
  },
]
`;

exports[`@InjectContainer should add InjectContainer metadata to a class when decorating a method with @InjectContainer 1`] = `
[
  DecoratorFactory {},
]
`;

exports[`@OnMissingBean should add OnMissingBean metadata to a class when decorated multiple times with @OnMissingBean 1`] = `
{
  "test2Method": [
    PropDecoratorFactory {
      "id": "OnMissingBean1",
    },
    PropDecoratorFactory {
      "id": "OnMissingBean2",
    },
  ],
  "testMethod": [
    PropDecoratorFactory {
      "id": "OnMissingBean",
    },
  ],
}
`;

exports[`@OnMissingBean should add OnMissingBean metadata to a class when decorated with @OnMissingBean 1`] = `
{
  "test2Method": [
    PropDecoratorFactory {
      "id": "OnMissingBean2",
    },
  ],
  "testMethod": [
    PropDecoratorFactory {
      "id": "OnMissingBean",
    },
  ],
}
`;

exports[`@Plugin should add Plugin metadata to a class when decorated with @Plugin('TestPlugin') 1`] = `
[
  DecoratorFactory {
    "beforeAll": false,
    "dependencies": [],
    "name": "TestPlugin",
  },
]
`;

exports[`@Plugin should add Plugin metadata to a class when decorated with @Plugin() 1`] = `
[
  DecoratorFactory {
    "beforeAll": false,
    "dependencies": [],
    "name": undefined,
  },
]
`;

exports[`@Plugin should add Plugin metadata to a class when decorated with @Plugin({ dependencies: ['TestPlugin'] }) 1`] = `
[
  DecoratorFactory {
    "beforeAll": false,
    "dependencies": [
      {
        "name": "TestPlugin",
        "order": "after",
      },
    ],
    "name": undefined,
  },
]
`;

exports[`@Plugin should add Plugin metadata to a class when decorated with @Plugin({ name: 'TestPlugin' }) 1`] = `
[
  DecoratorFactory {
    "beforeAll": false,
    "dependencies": [],
    "name": "TestPlugin",
  },
]
`;

exports[`@Plugin should add Plugin metadata to a class when decorated with @Plugin({ name: 'TestPlugin', dependencies: ['TestPlugin2'] }) 1`] = `
[
  DecoratorFactory {
    "beforeAll": false,
    "dependencies": [
      {
        "name": "TestPlugin2",
        "order": "after",
      },
    ],
    "name": "TestPlugin",
  },
]
`;

exports[`@PluginConfig should add Registry and config metadata to a class when decorated with @PluginConfig 1`] = `
[
  DecoratorFactory {
    "order": 100,
  },
  DecoratorFactory {
    "autobind": true,
    "options": {
      "order": 100,
    },
    "type": "ConfigType",
  },
]
`;

exports[`@PluginConfig should add Registry and config metadata to a class when decorated with @PluginConfig(100) 1`] = `
[
  DecoratorFactory {
    "order": 100,
  },
  DecoratorFactory {
    "autobind": true,
    "options": {
      "order": 100,
    },
    "type": "ConfigType",
  },
]
`;

exports[`@Register should add Registry metadata to a class when decorated with @Register 1`] = `
[
  DecoratorFactory {
    "autobind": true,
    "id": [Function],
    "type": "ConfigType",
  },
]
`;

exports[`@Scan should add Scan metadata to a class when decorated multiple times with @Scan 1`] = `
[
  DecoratorFactory {
    "path": "<PROJECT_ROOT>/packages/core/core/__tests__/otherFolder",
  },
  DecoratorFactory {
    "path": "<PROJECT_ROOT>/packages/core/core/__tests__",
  },
]
`;

exports[`@Scan should add Scan metadata to a class when decorated with @Scan() 1`] = `
[
  DecoratorFactory {
    "path": "<PROJECT_ROOT>/packages/core/core/__tests__",
  },
]
`;

exports[`@Scan should add Scan metadata to a class when decorated with @Scan(__dirname) 1`] = `
[
  DecoratorFactory {
    "path": "<PROJECT_ROOT>/packages/core/core/__tests__",
  },
]
`;

exports[`@Scan should add Scan metadata to a class when decorated with @Scan(relativePath) 1`] = `
[
  DecoratorFactory {
    "path": "<PROJECT_ROOT>/packages/core/core/__tests__/fixtures/loader",
  },
]
`;

exports[`@Scan should add Scan metadata to a class when decorated with @Scan(relativePath) 2 1`] = `
[
  DecoratorFactory {
    "path": "<PROJECT_ROOT>/packages/core/core/src",
  },
]
`;

exports[`@Service should add Service metadata to a class when decorated with @Service 1`] = `
[
  DecoratorFactory {
    "name": undefined,
  },
  DecoratorFactory {
    "autobind": true,
    "id": [Function],
    "type": "ServiceType",
  },
]
`;

exports[`@Service should add Service metadata to a class when decorated with @Service('Test) 1`] = `
[
  DecoratorFactory {
    "name": "Test",
  },
  DecoratorFactory {
    "autobind": true,
    "id": "Test",
    "type": "ServiceType",
  },
]
`;

exports[`@Value @Value(options: ValueOptions) should add Value metadata to a class when decorated with @Value(options: ValueOptions) 1`] = `
{
  "address": [
    PropDecoratorFactory {
      "path": "application.address",
      "validator": {
        "schema": {
          "$_root": {
            "ValidationError": [Function],
            "_types": Set {
              "alternatives",
              "any",
              "array",
              "boolean",
              "date",
              "function",
              "link",
              "number",
              "object",
              "string",
              "symbol",
              "binary",
            },
            "allow": [Function],
            "alt": [Function],
            "alternatives": [Function],
            "any": [Function],
            "array": [Function],
            "assert": [Function],
            "attempt": [Function],
            "binary": [Function],
            "bool": [Function],
            "boolean": [Function],
            "build": [Function],
            "cache": {
              "provision": [Function],
            },
            "checkPreferences": [Function],
            "compile": [Function],
            "custom": [Function],
            "date": [Function],
            "defaults": [Function],
            "disallow": [Function],
            "equal": [Function],
            "exist": [Function],
            "expression": [Function],
            "extend": [Function],
            "forbidden": [Function],
            "func": [Function],
            "function": [Function],
            "in": [Function],
            "invalid": [Function],
            "isError": [Function],
            "isExpression": [Function],
            "isRef": [Function],
            "isSchema": [Function],
            "link": [Function],
            "not": [Function],
            "number": [Function],
            "object": [Function],
            "only": [Function],
            "optional": [Function],
            "options": [Function],
            "override": Symbol(override),
            "preferences": [Function],
            "prefs": [Function],
            "ref": [Function],
            "required": [Function],
            "string": [Function],
            "strip": [Function],
            "symbol": [Function],
            "trace": [Function],
            "types": [Function],
            "untrace": [Function],
            "valid": [Function],
            "version": "17.7.0",
            "when": [Function],
            "x": [Function],
            Symbol(@hapi/lab/coverage/initialize): [Function],
          },
          "$_super": {},
          "$_temp": {
            "ruleset": false,
            "whens": {},
          },
          "$_terms": {
            "alterations": null,
            "examples": null,
            "externals": null,
            "metas": [],
            "notes": [],
            "replacements": null,
            "shared": null,
            "tags": [],
            "whens": null,
          },
          "_cache": null,
          "_flags": {
            "presence": "required",
          },
          "_ids": {
            "_byId": Map {},
            "_byKey": Map {},
            "_schemaChain": false,
          },
          "_invalids": null,
          "_preferences": null,
          "_refs": {
            "refs": [],
          },
          "_rules": [],
          "_singleRules": Map {},
          "_valids": null,
          "type": "string",
        },
        "throwError": true,
      },
    },
  ],
  "firstname": [
    PropDecoratorFactory {
      "path": "application.surname",
      "validator": {
        "schema": {
          "$_root": {
            "ValidationError": [Function],
            "_types": Set {
              "alternatives",
              "any",
              "array",
              "boolean",
              "date",
              "function",
              "link",
              "number",
              "object",
              "string",
              "symbol",
              "binary",
            },
            "allow": [Function],
            "alt": [Function],
            "alternatives": [Function],
            "any": [Function],
            "array": [Function],
            "assert": [Function],
            "attempt": [Function],
            "binary": [Function],
            "bool": [Function],
            "boolean": [Function],
            "build": [Function],
            "cache": {
              "provision": [Function],
            },
            "checkPreferences": [Function],
            "compile": [Function],
            "custom": [Function],
            "date": [Function],
            "defaults": [Function],
            "disallow": [Function],
            "equal": [Function],
            "exist": [Function],
            "expression": [Function],
            "extend": [Function],
            "forbidden": [Function],
            "func": [Function],
            "function": [Function],
            "in": [Function],
            "invalid": [Function],
            "isError": [Function],
            "isExpression": [Function],
            "isRef": [Function],
            "isSchema": [Function],
            "link": [Function],
            "not": [Function],
            "number": [Function],
            "object": [Function],
            "only": [Function],
            "optional": [Function],
            "options": [Function],
            "override": Symbol(override),
            "preferences": [Function],
            "prefs": [Function],
            "ref": [Function],
            "required": [Function],
            "string": [Function],
            "strip": [Function],
            "symbol": [Function],
            "trace": [Function],
            "types": [Function],
            "untrace": [Function],
            "valid": [Function],
            "version": "17.7.0",
            "when": [Function],
            "x": [Function],
            Symbol(@hapi/lab/coverage/initialize): [Function],
          },
          "$_super": {},
          "$_temp": {
            "ruleset": null,
            "whens": {},
          },
          "$_terms": {
            "alterations": null,
            "examples": null,
            "externals": null,
            "metas": [],
            "notes": [],
            "replacements": null,
            "shared": null,
            "tags": [],
            "whens": null,
          },
          "_cache": null,
          "_flags": {},
          "_ids": {
            "_byId": Map {},
            "_byKey": Map {},
            "_schemaChain": false,
          },
          "_invalids": null,
          "_preferences": null,
          "_refs": {
            "refs": [],
          },
          "_rules": [],
          "_singleRules": Map {},
          "_valids": null,
          "type": "string",
        },
        "throwError": true,
      },
    },
  ],
  "name": [
    PropDecoratorFactory {
      "path": "application.name",
      "validator": null,
    },
  ],
  "postalcode": [
    PropDecoratorFactory {
      "path": "application.postalcode",
      "validator": {
        "customErrorMsg": "Error",
        "schema": {
          "$_root": {
            "ValidationError": [Function],
            "_types": Set {
              "alternatives",
              "any",
              "array",
              "boolean",
              "date",
              "function",
              "link",
              "number",
              "object",
              "string",
              "symbol",
              "binary",
            },
            "allow": [Function],
            "alt": [Function],
            "alternatives": [Function],
            "any": [Function],
            "array": [Function],
            "assert": [Function],
            "attempt": [Function],
            "binary": [Function],
            "bool": [Function],
            "boolean": [Function],
            "build": [Function],
            "cache": {
              "provision": [Function],
            },
            "checkPreferences": [Function],
            "compile": [Function],
            "custom": [Function],
            "date": [Function],
            "defaults": [Function],
            "disallow": [Function],
            "equal": [Function],
            "exist": [Function],
            "expression": [Function],
            "extend": [Function],
            "forbidden": [Function],
            "func": [Function],
            "function": [Function],
            "in": [Function],
            "invalid": [Function],
            "isError": [Function],
            "isExpression": [Function],
            "isRef": [Function],
            "isSchema": [Function],
            "link": [Function],
            "not": [Function],
            "number": [Function],
            "object": [Function],
            "only": [Function],
            "optional": [Function],
            "options": [Function],
            "override": Symbol(override),
            "preferences": [Function],
            "prefs": [Function],
            "ref": [Function],
            "required": [Function],
            "string": [Function],
            "strip": [Function],
            "symbol": [Function],
            "trace": [Function],
            "types": [Function],
            "untrace": [Function],
            "valid": [Function],
            "version": "17.7.0",
            "when": [Function],
            "x": [Function],
            Symbol(@hapi/lab/coverage/initialize): [Function],
          },
          "$_super": {},
          "$_temp": {
            "ruleset": false,
            "whens": {},
          },
          "$_terms": {
            "alterations": null,
            "examples": null,
            "externals": null,
            "metas": [],
            "notes": [],
            "replacements": null,
            "shared": null,
            "tags": [],
            "whens": null,
          },
          "_cache": null,
          "_flags": {
            "presence": "required",
          },
          "_ids": {
            "_byId": Map {},
            "_byKey": Map {},
            "_schemaChain": false,
          },
          "_invalids": null,
          "_preferences": null,
          "_refs": {
            "refs": [],
          },
          "_rules": [],
          "_singleRules": Map {},
          "_valids": null,
          "type": "string",
        },
        "throwError": true,
      },
    },
  ],
  "surname": [
    PropDecoratorFactory {
      "path": "application.surname",
      "validator": {
        "schema": {
          "$_root": {
            "ValidationError": [Function],
            "_types": Set {
              "alternatives",
              "any",
              "array",
              "boolean",
              "date",
              "function",
              "link",
              "number",
              "object",
              "string",
              "symbol",
              "binary",
            },
            "allow": [Function],
            "alt": [Function],
            "alternatives": [Function],
            "any": [Function],
            "array": [Function],
            "assert": [Function],
            "attempt": [Function],
            "binary": [Function],
            "bool": [Function],
            "boolean": [Function],
            "build": [Function],
            "cache": {
              "provision": [Function],
            },
            "checkPreferences": [Function],
            "compile": [Function],
            "custom": [Function],
            "date": [Function],
            "defaults": [Function],
            "disallow": [Function],
            "equal": [Function],
            "exist": [Function],
            "expression": [Function],
            "extend": [Function],
            "forbidden": [Function],
            "func": [Function],
            "function": [Function],
            "in": [Function],
            "invalid": [Function],
            "isError": [Function],
            "isExpression": [Function],
            "isRef": [Function],
            "isSchema": [Function],
            "link": [Function],
            "not": [Function],
            "number": [Function],
            "object": [Function],
            "only": [Function],
            "optional": [Function],
            "options": [Function],
            "override": Symbol(override),
            "preferences": [Function],
            "prefs": [Function],
            "ref": [Function],
            "required": [Function],
            "string": [Function],
            "strip": [Function],
            "symbol": [Function],
            "trace": [Function],
            "types": [Function],
            "untrace": [Function],
            "valid": [Function],
            "version": "17.7.0",
            "when": [Function],
            "x": [Function],
            Symbol(@hapi/lab/coverage/initialize): [Function],
          },
          "$_super": {},
          "$_temp": {
            "ruleset": null,
            "whens": {},
          },
          "$_terms": {
            "alterations": null,
            "examples": null,
            "externals": null,
            "metas": [],
            "notes": [],
            "replacements": null,
            "shared": null,
            "tags": [],
            "whens": null,
          },
          "_cache": null,
          "_flags": {},
          "_ids": {
            "_byId": Map {},
            "_byKey": Map {},
            "_schemaChain": false,
          },
          "_invalids": null,
          "_preferences": null,
          "_refs": {
            "refs": [],
          },
          "_rules": [],
          "_singleRules": Map {},
          "_valids": null,
          "type": "string",
        },
        "throwError": true,
      },
    },
  ],
}
`;

exports[`@init should add init metadata to a class when decorating a method with @init 1`] = `
{
  "test2Method": [
    PropDecoratorFactory {},
  ],
  "testMethod": [
    PropDecoratorFactory {},
  ],
}
`;

exports[`@preDestroy should add preDestroy metadata to a class when decorated with @preDestroy 1`] = `
{
  "preDestroy": [
    PropDecoratorFactory {},
  ],
  "preDestroy2": [
    PropDecoratorFactory {},
  ],
}
`;
