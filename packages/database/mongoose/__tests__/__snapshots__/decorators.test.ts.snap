// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@Document('Hero') decorator 1`] = `
Array [
  DecoratorFactory {
    "name": "Hero",
    "schema": Schema {
      "$id": 1,
      "_indexes": Array [],
      "_userProvidedOptions": Object {},
      "aliases": Object {},
      "callQueue": Array [],
      "childSchemas": Array [],
      "inherits": Object {},
      "methodOptions": Object {},
      "methods": Object {},
      "nested": Object {},
      "obj": Object {
        "name": Object {
          "required": true,
          "type": [Function],
        },
      },
      "options": Object {
        "_id": true,
        "autoIndex": null,
        "bufferCommands": true,
        "capped": false,
        "discriminatorKey": "__t",
        "id": true,
        "minimize": true,
        "noId": false,
        "noVirtualId": false,
        "read": null,
        "shardKey": null,
        "strict": true,
        "typeKey": "type",
        "validateBeforeSave": true,
        "versionKey": "__v",
      },
      "paths": Object {
        "_id": ObjectId {
          "_index": null,
          "defaultValue": [Function],
          "getters": Array [],
          "instance": "ObjectID",
          "options": SchemaObjectIdOptions {
            "auto": true,
            "type": [Function],
          },
          "path": "_id",
          "setters": Array [
            [Function],
          ],
          "validators": Array [],
          Symbol(mongoose#schemaType): true,
        },
        "name": SchemaString {
          "_index": null,
          "enumValues": Array [],
          "getters": Array [],
          "instance": "String",
          "isRequired": true,
          "options": SchemaStringOptions {
            "required": true,
            "type": [Function],
          },
          "originalRequiredValue": true,
          "path": "name",
          "regExp": null,
          "requiredValidator": [Function],
          "setters": Array [],
          "validators": Array [
            Object {
              "message": "Path \`{PATH}\` is required.",
              "type": "required",
              "validator": [Function],
            },
          ],
          Symbol(mongoose#schemaType): true,
        },
      },
      "plugins": Array [],
      "query": Object {},
      "s": Object {
        "hooks": Kareem {
          "_posts": Map {},
          "_pres": Map {},
        },
      },
      "singleNestedPaths": Object {},
      "statics": Object {},
      "subpaths": Object {},
      "tree": Object {
        "_id": Object {
          "auto": true,
          "type": [Function],
        },
        "name": Object {
          "required": true,
          "type": [Function],
        },
      },
      "virtuals": Object {},
    },
  },
  DecoratorFactory {
    "autobind": false,
    "id": [Function],
    "type": "Document",
  },
]
`;

exports[`@Document(DocumentOptions without collectionName)  decorator 1`] = `
Array [
  DecoratorFactory {
    "name": "Hero",
    "schema": Schema {
      "$id": 2,
      "_indexes": Array [],
      "_userProvidedOptions": Object {},
      "aliases": Object {},
      "callQueue": Array [],
      "childSchemas": Array [],
      "inherits": Object {},
      "methodOptions": Object {},
      "methods": Object {},
      "nested": Object {},
      "obj": Object {
        "name": Object {
          "required": true,
          "type": [Function],
        },
      },
      "options": Object {
        "_id": true,
        "autoIndex": null,
        "bufferCommands": true,
        "capped": false,
        "discriminatorKey": "__t",
        "id": true,
        "minimize": true,
        "noId": false,
        "noVirtualId": false,
        "read": null,
        "shardKey": null,
        "strict": true,
        "typeKey": "type",
        "validateBeforeSave": true,
        "versionKey": "__v",
      },
      "paths": Object {
        "_id": ObjectId {
          "_index": null,
          "defaultValue": [Function],
          "getters": Array [],
          "instance": "ObjectID",
          "options": SchemaObjectIdOptions {
            "auto": true,
            "type": [Function],
          },
          "path": "_id",
          "setters": Array [
            [Function],
          ],
          "validators": Array [],
          Symbol(mongoose#schemaType): true,
        },
        "name": SchemaString {
          "_index": null,
          "enumValues": Array [],
          "getters": Array [],
          "instance": "String",
          "isRequired": true,
          "options": SchemaStringOptions {
            "required": true,
            "type": [Function],
          },
          "originalRequiredValue": true,
          "path": "name",
          "regExp": null,
          "requiredValidator": [Function],
          "setters": Array [],
          "validators": Array [
            Object {
              "message": "Path \`{PATH}\` is required.",
              "type": "required",
              "validator": [Function],
            },
          ],
          Symbol(mongoose#schemaType): true,
        },
      },
      "plugins": Array [],
      "query": Object {},
      "s": Object {
        "hooks": Kareem {
          "_posts": Map {},
          "_pres": Map {},
        },
      },
      "singleNestedPaths": Object {},
      "statics": Object {},
      "subpaths": Object {},
      "tree": Object {
        "_id": Object {
          "auto": true,
          "type": [Function],
        },
        "name": Object {
          "required": true,
          "type": [Function],
        },
      },
      "virtuals": Object {},
    },
  },
  DecoratorFactory {
    "autobind": false,
    "id": [Function],
    "type": "Document",
  },
]
`;

exports[`@Document(DocumentOptions)  decorator 1`] = `
Array [
  DecoratorFactory {
    "collectionName": "HeroCollection",
    "name": "Hero",
    "schema": Schema {
      "$id": 3,
      "_indexes": Array [],
      "_userProvidedOptions": Object {},
      "aliases": Object {},
      "callQueue": Array [],
      "childSchemas": Array [],
      "inherits": Object {},
      "methodOptions": Object {},
      "methods": Object {},
      "nested": Object {},
      "obj": Object {
        "name": Object {
          "required": true,
          "type": [Function],
        },
      },
      "options": Object {
        "_id": true,
        "autoIndex": null,
        "bufferCommands": true,
        "capped": false,
        "discriminatorKey": "__t",
        "id": true,
        "minimize": true,
        "noId": false,
        "noVirtualId": false,
        "read": null,
        "shardKey": null,
        "strict": true,
        "typeKey": "type",
        "validateBeforeSave": true,
        "versionKey": "__v",
      },
      "paths": Object {
        "_id": ObjectId {
          "_index": null,
          "defaultValue": [Function],
          "getters": Array [],
          "instance": "ObjectID",
          "options": SchemaObjectIdOptions {
            "auto": true,
            "type": [Function],
          },
          "path": "_id",
          "setters": Array [
            [Function],
          ],
          "validators": Array [],
          Symbol(mongoose#schemaType): true,
        },
        "name": SchemaString {
          "_index": null,
          "enumValues": Array [],
          "getters": Array [],
          "instance": "String",
          "isRequired": true,
          "options": SchemaStringOptions {
            "required": true,
            "type": [Function],
          },
          "originalRequiredValue": true,
          "path": "name",
          "regExp": null,
          "requiredValidator": [Function],
          "setters": Array [],
          "validators": Array [
            Object {
              "message": "Path \`{PATH}\` is required.",
              "type": "required",
              "validator": [Function],
            },
          ],
          Symbol(mongoose#schemaType): true,
        },
      },
      "plugins": Array [],
      "query": Object {},
      "s": Object {
        "hooks": Kareem {
          "_posts": Map {},
          "_pres": Map {},
        },
      },
      "singleNestedPaths": Object {},
      "statics": Object {},
      "subpaths": Object {},
      "tree": Object {
        "_id": Object {
          "auto": true,
          "type": [Function],
        },
        "name": Object {
          "required": true,
          "type": [Function],
        },
      },
      "virtuals": Object {},
    },
  },
  DecoratorFactory {
    "autobind": false,
    "id": [Function],
    "type": "Document",
  },
]
`;

exports[`MUnit decorators should add MUnit metadata to a class when decorating a method with @MUnit 1`] = `
Array [
  DecoratorFactory {
    "name": "default",
  },
]
`;
